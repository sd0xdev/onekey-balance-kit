---
description: 區塊鏈服務模組
globs:
alwaysApply: false
---
# 區塊鏈服務模組

本專案實現了一個模組化的區塊鏈服務架構，通過統一介面支援多種區塊鏈。`src/chains` 目錄包含核心業務邏輯和區塊鏈操作模組。系統支援主網和測試網，並使用 chainId 來區分不同網路。

## 架構概述

系統使用混合架構設計，結合了工廠模式、裝飾器自動註冊和代理模式：

1. **統一介面**：所有鏈服務實現 [ChainService](mdc:src/chains/interfaces/chain-service.interface.ts) 介面
2. **餘額功能擴展**：支援餘額查詢的鏈服務額外實現 [BalanceQueryable](mdc:src/chains/interfaces/balance-queryable.interface.ts) 介面
3. **抽象基類**：[AbstractChainService](mdc:src/chains/services/core/abstract-chain.service.ts) 提供通用實現
4. **EVM 抽象基類**：[AbstractEvmChainService](mdc:src/chains/services/core/abstract-evm-chain.service.ts) 提供 EVM 鏈共享邏輯
5. **工廠模式**：[ChainServiceFactory](mdc:src/chains/services/core/chain-service.factory.ts) 管理服務實例
6. **裝飾器註冊**：使用 [@Chain](mdc:src/chains/decorators/chain.decorator.ts) 裝飾器自動發現和註冊服務
7. **鏈路由系統**：使用 [ChainRouter](mdc:src/chains/services/core/chain-router.service.ts) 根據 chainId 動態路由請求
8. **攔截器機制**：使用 [BlockchainProviderInterceptor](mdc:src/chains/interceptors/blockchain-provider.interceptor.ts) 處理提供者選擇
9. **請求級提供者**：使用 [UseBlockchainProvider](mdc:src/chains/decorators/blockchain-provider.decorator.ts) 裝飾器設定提供者
10. **錯誤處理**：使用 [ErrorCode](mdc:src/common/constants/error-codes.ts) 和自定義異常提供統一錯誤處理

## 目錄結構

```
src/chains/
├── interfaces/                     # 介面定義
│   ├── chain-service.interface.ts  # 鏈服務介面
│   └── balance-queryable.interface.ts # 餘額服務介面
├── decorators/                     # 裝飾器定義
│   ├── chain.decorator.ts          # 鏈服務裝飾器
│   └── blockchain-provider.decorator.ts # 提供者裝飾器
├── interceptors/                   # 攔截器
│   └── blockchain-provider.interceptor.ts # 提供者攔截器
├── services/                       # 服務實現
│   ├── core/                       # 核心服務
│   │   ├── abstract-chain.service.ts # 抽象鏈服務基類
│   │   ├── abstract-evm-chain.service.ts # EVM鏈服務基類
│   │   ├── chain-service.factory.ts  # 鏈服務工廠
│   │   ├── chain-router.service.ts   # 鏈路由服務
│   │   ├── discovery.service.ts      # 裝飾器發現服務
│   │   ├── blockchain.service.ts     # 區塊鏈服務
│   │   └── request-context.service.ts # 請求上下文服務
│   ├── ethereum/                   # 以太坊服務
│   │   └── ethereum.service.ts
│   ├── polygon/                    # Polygon 服務
│   │   └── polygon.service.ts
│   ├── bsc/                        # BSC 服務
│   │   └── bsc.service.ts
│   └── solana/                     # Solana 服務
│       └── solana.service.ts
├── controllers/                    # 控制器
│   ├── chains.controller.ts        # 鏈資訊控制器
│   └── chain-id.controller.ts      # 基於鏈ID的API控制器
├── constants/                      # 常量定義
│   ├── index.ts                    # 鏈相關常量
│   └── evm-chains.ts               # EVM鏈元數據定義
├── chains.module.ts                # 區塊鏈模組
└── index.ts                        # 入口檔案
```

## 支援的區塊鏈

目前支援的區塊鏈包括：

### 非 EVM 鏈
- **Solana** (SOL)：完整支援地址驗證、交易查詢、餘額查詢
  - 主網
  - 測試網 (Devnet)

### EVM 鏈
- **以太坊** (ETH)：完整支援地址驗證、交易查詢、餘額查詢
  - 主網 (chainId: 1)
  - 測試網 Goerli (chainId: 5)
  - 測試網 Sepolia (chainId: 11155111)
- **Polygon** (POLY/MATIC)：完整支援地址驗證、交易查詢、餘額查詢
  - 主網 (chainId: 137)
  - 測試網 Mumbai (chainId: 80001)
- **BSC** (BNB Smart Chain)：完整支援地址驗證、交易查詢、餘額查詢
  - 主網 (chainId: 56)
  - 測試網 (chainId: 97)

## 多網一服務架構設計

系統實現了多網一服務的架構設計，使同一服務可以同時處理主網和測試網請求：

### 1. Chain 裝飾器改進

- **多參數支持**：`@Chain(mainnet, ...testnets)` 允許指定主網和測試網
- **全局映射**：`GLOBAL_CHAIN_SERVICE_MAP` 記錄所有鏈服務和對應網路
- **自動註冊**：使用裝飾器元數據同時註冊主網和測試網服務

### 2. 基於 chainId 的路由系統

- **動態路由**：`ChainRouter` 服務根據 chainId 將請求分發到對應鏈服務
- **鏈切換**：`setChainId()` 方法允許動態切換當前網路
- **網路識別**：所有 EVM 服務通過 `currentChainId` 識別當前網路

### 3. EVM 服務改進

- **抽象基類更新**：移除 `isTestnet` 標誌，改用 `currentChainId` 屬性
- **提供者工廠升級**：`ProviderFactory.getEvmProvider(chainId)` 基於 chainId 獲取提供者
- **元數據增強**：`CHAIN_INFO_MAP` 擴展包含所有主網和測試網資訊

### 4. API 端點增強

- **基於 chainId 的 API**：`/v1/balances/:chainId/:address` 直接使用 chainId 路由
- **網路參數**：原有 API 支援 `network` 和 `chainId` 查詢參數
- **測試網過濾**：`include_testnet` 參數控制是否包含測試網資訊

## 使用方法

### 1. 引入模組

```typescript
import { Module } from '@nestjs/common';
import { ChainsModule } from './chains/chains.module';

@Module({
  imports: [ChainsModule],
})
export class AppModule {}
```

### 2. 使用區塊鏈服務

有兩種方式使用鏈服務：

#### a. 直接注入工廠服務：

```typescript
import { Injectable } from '@nestjs/common';
import { ChainServiceFactory } from './chains/services/core/chain-service.factory';
import { ChainName } from './chains/constants';

@Injectable()
export class YourService {
  constructor(private readonly chainServiceFactory: ChainServiceFactory) {}

  async someMethod() {
    // 使用鏈名稱
    const ethService = this.chainServiceFactory.getChainService(ChainName.ETHEREUM);

    // 指定特定的chainId
    ethService.setChainId(5); // 切換到 Goerli 測試網

    // 使用服務方法
    const isValid = ethService.isValidAddress('0x...');
    const balance = await ethService.getBalances('0x...');
  }
}
```

#### b. 使用 BlockchainService（推薦）：

```typescript
import { Injectable } from '@nestjs/common';
import { BlockchainService } from './chains/services/core/blockchain.service';

@Injectable()
export class YourService {
  constructor(private readonly blockchainService: BlockchainService) {}

  async someMethod() {
    // 獲取特定鏈的服務 - 會自動使用請求上下文中的提供者
    const ethereumService = this.blockchainService.getService('ethereum');

    // 切換到特定chainId
    ethereumService.setChainId(11155111); // 切換到 Sepolia 網路

    // 使用服務方法
    const isValid = ethereumService.isValidAddress('0x...');
    const balance = await ethereumService.getBalances('0x...');
  }
}
```

### 3. 使用基於 chainId 的 API

```
# 指定chainId直接查詢
GET /v1/balances/1/0x742d35Cc6634C0532925a3b844Bc454e4438f44e  # 以太坊主網
GET /v1/balances/5/0x742d35Cc6634C0532925a3b844Bc454e4438f44e  # 以太坊 Goerli 測試網
GET /v1/balances/137/0x742d35Cc6634C0532925a3b844Bc454e4438f44e  # Polygon 主網

# 使用傳統API並指定網路參數
GET /balances/ethereum/0x742d35Cc6634C0532925a3b844Bc454e4438f44e?network=testnet
GET /balances/ethereum/0x742d35Cc6634C0532925a3b844Bc454e4438f44e?chainId=5
```

### 4. 指定區塊鏈提供者

```typescript
import { Controller, Get, Param } from '@nestjs/common';
import { UseBlockchainProvider } from './chains/decorators/blockchain-provider.decorator';

@Controller('balances')
@UseBlockchainProvider('alchemy') // 控制器級別設置
export class BalanceController {
  constructor(private readonly balanceService: BalanceService) {}

  @Get(':chainId/:address')
  @UseBlockchainProvider('quicknode') // 方法級別設置（優先）
  getBalances(@Param('chainId') chainId: number, @Param('address') address: string) {
    return this.balanceService.getBalanceByChainId(chainId, address);
  }
}
```

## 餘額查詢 API（已更新）

`BalanceQueryable` 介面已更新，使用 chainId 取代 useTestnet 參數：

```typescript
export interface BalanceQueryable {
  /**
   * 獲取特定地址的餘額資訊
   * @param address 區塊鏈地址
   * @param chainId 鏈ID，用於指定網路
   * @param providerType 可選的提供者類型
   * @returns 包含餘額信息的對象
   */
  getBalances(address: string, chainId?: number, providerType?: string): Promise<BalanceResponse>;
}
```

## 添加新的鏈或測試網

添加新的 EVM 鏈或測試網需要以下步驟：

1. 在 `constants/index.ts` 中添加 ChainName：

```typescript
export enum ChainName {
  // 現有鏈...
  ARBITRUM = 'arbitrum',
  ARBITRUM_GOERLI = 'arbitrum_goerli',
}
```

2. 在 `CHAIN_INFO_MAP` 中添加鏈元數據：

```typescript
export const CHAIN_INFO_MAP: Record<string, ChainInfo> = {
  // 現有鏈...
  [ChainName.ARBITRUM]: {
    id: 42161,
    name: ChainName.ARBITRUM,
    isMainnet: true,
    display: 'Arbitrum One',
    coinSymbols: ['ETH'],
  },
  [ChainName.ARBITRUM_GOERLI]: {
    id: 421613,
    name: ChainName.ARBITRUM_GOERLI,
    isMainnet: false,
    mainnetRef: ChainName.ARBITRUM,
    display: 'Arbitrum Goerli',
    coinSymbols: ['ETH'],
  },
}
```

3. 創建繼承 AbstractEvmChainService 的鏈服務實現：

```typescript
@Injectable()
@Chain(ChainName.ARBITRUM, ChainName.ARBITRUM_GOERLI)
export class ArbitrumService extends AbstractEvmChainService {
  // 實現必要方法...
}
```

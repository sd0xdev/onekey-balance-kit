---
description: Blockchain Provider
globs:
alwaysApply: false
---
# 區塊鏈提供者指南

本文檔說明了如何在系統中添加和配置新的區塊鏈提供者。

## 架構概述

本系統使用工廠模式和服務發現機制來管理不同的區塊鏈提供者。主要組件包括：

1. [`BlockchainProviderInterface`](mdc:src/providers/interfaces/blockchain-provider.interface.ts) - 所有提供者必須實現的基礎接口
2. [`ProviderFactory`](mdc:src/providers/provider.factory.ts) - 管理和提供區塊鏈提供者的工廠類
3. [`ProviderDiscoveryService`](mdc:src/providers/provider-discovery.service.ts) - 服務發現機制，用於自動發現和註冊提供者
4. [`ProvidersModule`](mdc:src/providers/providers.module.ts) - 負責註冊所有相關服務的模組

## 提供者服務發現

系統使用裝飾器和服務發現機制自動註冊提供者：

1. 使用 `@Provider` 裝飾器標記區塊鏈提供者類
2. `ProviderDiscoveryService` 在應用啟動時自動發現這些提供者
3. `ProviderFactory` 將發現的提供者註冊並管理實例

```typescript
@Provider({
  blockchainType: BlockchainType.ETHEREUM,
  providerType: ProviderType.ALCHEMY,
})
@Injectable()
export class EthereumAlchemyProvider extends AbstractEthereumProviderService {
  // 實現...
}
```

## 添加新的區塊鏈提供者

要添加新的區塊鏈提供者，請遵循以下步驟：

1. **創建接口實現**：實現對應區塊鏈的接口（如 `EthereumProviderInterface` 或 `SolanaProviderInterface`）

2. **使用 @Provider 裝飾器標記**：
   ```typescript
   @Provider({
     blockchainType: BlockchainType.YOUR_BLOCKCHAIN,
     providerType: ProviderType.YOUR_PROVIDER,
   })
   @Injectable()
   export class YourBlockchainProvider implements BlockchainProviderInterface {
     // 實現...
   }
   ```

3. **在模組中註冊**：在 `ProvidersModule` 的 `providers` 數組中添加你的提供者類

4. **配置環境變數**：在 `.env` 文件中添加必要的 API 密鑰

## 使用提供者

可以通過 `ProviderFactory` 獲取提供者實例：

```typescript
// 注入 ProviderFactory
constructor(private readonly providerFactory: ProviderFactory) {}

// 獲取特定提供者
const ethProvider = this.providerFactory.getProvider(BlockchainType.ETHEREUM);
// 或使用便捷方法
const ethProvider = this.providerFactory.getEthereumProvider();

// 獲取特定提供者類型
const alchemyProvider = this.providerFactory.getProvider(
  BlockchainType.ETHEREUM,
  ProviderType.ALCHEMY
);
```

## 當前支援的提供者

1. **以太坊提供者**：
   - [`EthereumAlchemyProvider`](mdc:src/providers/implementations/ethereum/ethereum-alchemy.provider.ts) - 使用 Alchemy API 的以太坊提供者

2. **Solana提供者**：
   - [`SolanaAlchemyProvider`](mdc:src/providers/implementations/solana/solana-alchemy.provider.ts) - 使用 Alchemy API 的 Solana 提供者

## 依賴和模組配置

確保在使用 HTTP 請求的提供者（如 `SolanaAlchemyProvider`）時，在 `ProvidersModule` 中導入 `HttpModule`：

```typescript
@Module({
  imports: [DiscoveryModule, ConfigModule, HttpModule],
  providers: [
    // ... 其他提供者
    ProviderDiscoveryService,
    ProviderFactory,
  ],
  exports: [ProviderFactory],
})
export class ProvidersModule {}
```

## 提供者實現檢查清單

確保您的提供者實現了以下方法：

- `getBaseUrl(networkType?)`: 獲取 API 基本 URL
- `getChainConfig()`: 獲取鏈配置
- `getApiKey(networkType?)`: 獲取 API 密鑰
- `getBalances(address, networkType?)`: 獲取餘額
- `isSupported()`: 檢查提供者是否被支持

## 故障排除

- 如果提供者未被正確註冊，檢查 imports 和 exports
- 如果 API 調用失敗，檢查 API 密鑰和 URL
- 如果返回的數據格式不正確，檢查轉換邏輯

# 區塊鏈提供者 (Blockchain Provider)

本專案使用多種區塊鏈提供者來與不同的區塊鏈網絡互動。區塊鏈提供者實現統一的介面，但針對每個區塊鏈有特定的實現細節。

## 主要提供者

- **以太坊提供者**：使用 [ethers](mdc:https:/docs.ethers.org) 庫與以太坊區塊鏈交互
- **Solana 提供者**：使用 [@solana/web3.js](mdc:https:/solana-labs.github.io/solana-web3.js) 與 Solana 區塊鏈交互

## 地址驗證

每個區塊鏈有特定的地址格式和驗證邏輯：

### 以太坊地址驗證

以太坊服務 [src/chains/services/ethereum/ethereum.service.ts](mdc:src/chains/services/ethereum/ethereum.service.ts) 使用 `isAddress` 函數進行嚴謹的地址驗證：

```typescript
import { isAddress } from 'ethers';

// 驗證以太坊地址
const isValid = isAddress('0x742d35Cc6634C0532925a3b844Bc454e4438f44e');
```

### Solana 地址驗證

Solana 服務 [src/chains/services/solana/solana.service.ts](mdc:src/chains/services/solana/solana.service.ts) 使用 `PublicKey` 類進行地址驗證：

```typescript
import { PublicKey } from '@solana/web3.js';

// 驗證 Solana 地址
try {
  new PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin');
  console.log('Address is valid');
} catch (error) {
  console.error('Invalid address');
}
```

## 擴展新的區塊鏈提供者

要添加新的區塊鏈提供者，需要：

1. 在 `src/providers/blockchain/` 目錄中創建新的提供者類
2. 在 `StandardChainType` 枚舉中添加新的鏈類型
3. 在 `BlockchainProviderFactory` 中添加新的提供者處理邏輯
4. 創建相應的服務類並繼承 `AbstractChainService`
5. 使用 `@Chain()` 裝飾器標記新服務

# 區塊鏈提供者服務模組

本項目實現了一個模組化的區塊鏈服務架構，通過統一介面支援多種區塊鏈。

## 架構概述

系統使用混合架構設計，結合了工廠模式、裝飾器自動註冊和模組化原則：

1. **統一介面**：所有鏈服務實現 [ChainService](mdc:src/chains/interfaces/chain-service.interface.ts) 介面
2. **抽象基類**：[AbstractChainService](mdc:src/chains/services/abstract-chain.service.ts) 提供通用實現
3. **工廠模式**：[ChainServiceFactory](mdc:src/chains/services/chain-service.factory.ts) 管理服務實例
4. **裝飾器註冊**：使用 [@Chain](mdc:src/chains/decorators/chain.decorator.ts) 裝飾器自動發現和註冊服務
5. **模組化**：每條鏈擁有獨立模組和服務實現

## 支援的區塊鏈

目前支援的區塊鏈包括：

- **以太坊** (ETH)：完整支援地址驗證、交易查詢
- **Solana** (SOL)：完整支援地址驗證、交易查詢

## 使用方法

1. **注入工廠服務**：
   ```typescript
   constructor(private readonly chainServiceFactory: ChainServiceFactory) {}
   ```

2. **獲取特定鏈服務**：
   ```typescript
   // 使用鏈名稱
   const ethService = this.chainServiceFactory.getChainService(ChainName.ETHEREUM);

   // 也可使用代幣符號（不區分大小寫）
   const solService = this.chainServiceFactory.getChainService('sol');
   ```

3. **使用服務方法**：
   ```typescript
   const isValid = ethService.isValidAddress('0x...');
   const txHashes = await solService.getAddressTransactionHashes('sol_address');
   ```

## 擴展新區塊鏈

添加新的區塊鏈支援需要：

1. 更新 [constants/index.ts](mdc:src/chains/constants/index.ts) 中的 `ChainName` 枚舉
2. 創建繼承 `AbstractChainService` 的服務類並使用 `@Chain()` 裝飾器
3. 在主模組中導入新的鏈特定模組

詳細實作請參考 [README.md](mdc:src/chains/README.md) 中的擴展指南。

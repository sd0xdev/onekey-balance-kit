---
description: ESLint 配置指南
globs: 
alwaysApply: false
---
# ESLint 配置指南

本專案使用 ESLint 進行代碼風格和質量的檢查，確保代碼的一致性和可維護性。

## 核心規則

- **使用 TypeScript**: 所有新代碼必須使用 TypeScript 編寫，利用強類型系統提高代碼質量
- **避免 `any` 類型**: 盡量不要使用 `any` 類型，應優先使用明確的類型定義或泛型
- **異步函數**: 所有異步函數都應該返回 Promise 並正確處理錯誤
- **命名規範**: 使用駝峰命名法（camelCase）為變量和函數命名，使用大駝峰命名法（PascalCase）為類和介面命名

## 區塊鏈相關規則

### 地址和哈希處理

處理區塊鏈地址和哈希時，遵循以下規則：

```typescript
// ✅ 正確方式
function isValidEthereumAddress(address: string): boolean {
  return isAddress(address); // 使用 ethers 庫的 isAddress 函數
}

// ❌ 避免使用
function isValidEthereumAddress(address: string): boolean {
  return /^0x[a-fA-F0-9]{40}$/.test(address); // 不要使用簡單正則表達式驗證地址
}
```

### 數值處理

處理區塊鏈中的數值時，必須使用專門的大數庫（如 ethers 的 BigNumber 或原生 BigInt）：

```typescript
// ✅ 正確方式
import { parseUnits } from 'ethers';

function convertToWei(amount: string, decimals = 18): bigint {
  return parseUnits(amount, decimals);
}

// ❌ 避免使用
function convertToWei(amount: string): number {
  return parseFloat(amount) * 1e18; // 不要使用浮點數處理區塊鏈金額
}
```

## 模式和反模式

### 服務模式

```typescript
// ✅ 正確方式：使用依賴注入
@Injectable()
export class BlockchainService {
  constructor(
    private readonly configService: ConfigService,
    private readonly httpService: HttpService,
  ) {}
}

// ❌ 避免使用：直接創建實例
export class BlockchainService {
  private readonly config = new ConfigService();
  private readonly http = new HttpService();
}
```

### 錯誤處理

```typescript
// ✅ 正確方式：捕獲並轉換錯誤
async function getBalance(address: string): Promise<string> {
  try {
    return await blockchainProvider.getBalance(address);
  } catch (error) {
    this.logger.error(`Failed to get balance for ${address}`, error);
    throw new ServiceException('Failed to retrieve balance');
  }
}

// ❌ 避免使用：直接拋出原始錯誤
async function getBalance(address: string): Promise<string> {
  try {
    return await blockchainProvider.getBalance(address);
  } catch (error) {
    throw error; // 不要直接拋出原始錯誤
  }
}
```

## 專案特定規則

- **鏈服務實現**: 所有鏈服務必須繼承 `AbstractChainService` 並實現 `ChainService` 介面
- **裝飾器使用**: 使用 `@Chain()` 裝飾器標記所有鏈服務
- **常量組織**: 每個鏈特定的常量應放在對應的 `constants.ts` 文件中
- **日誌記錄**: 使用抽象基類提供的日誌方法進行統一的日誌記錄

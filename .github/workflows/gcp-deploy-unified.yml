# GitHub Actions ‚Äì Deploy to Google Cloud Run (4-job pipeline)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# jobs:
# build_push      ‚Üí Áî¢Áîü & Êé®ÈÄÅÊò†ÂÉèÔºåËº∏Âá∫ image_tag / image_env_tag
# scan_image      ‚Üí Trivy ÊéÉÊèèÔºå‰æùË≥¥ build_push
# generate_manifest ‚Üí Áî¢Áîü Cloud Run manifestÔºå‰æùË≥¥ build_push
# deploy          ‚Üí ÈÉ®ÁΩ≤ Cloud RunÔºå‰æùË≥¥ generate_manifest
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

name: Deploy to Google Cloud Run

on:
  push:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'ÈÉ®ÁΩ≤Áí∞Â¢É (production/staging)'
        required: true
        default: 'staging'
        type: choice
        options: [production, staging]

# ---------- Re-usable environment block ----------
env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ vars.GCP_REGION || 'asia-east1' }}

# ÊòéÁ¢∫Ë®≠ÁΩÆÈ†êË®≠Ê¨äÈôê
permissions:
  contents: read

jobs:
  # =============================================================
  # 1) Build & Push Docker Image
  # =============================================================
  build_push:
    name: üèóÔ∏è Build & Push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    outputs:
      image_tag: ${{ steps.vars.outputs.IMAGE_TAG }}
      image_env: ${{ steps.vars.outputs.IMAGE_ENV_TAG }}
      image_path: ${{ steps.vars.outputs.IMAGE_PATH }}
      env_suffix: ${{ steps.vars.outputs.ENV_SUFFIX }}
      secret_prefix: ${{ steps.vars.outputs.SECRET_PREFIX }}
      max_instances: ${{ steps.vars.outputs.MAX_INSTANCES }}
      node_env: ${{ steps.vars.outputs.NODE_ENV }}
      log_level: ${{ steps.vars.outputs.LOG_LEVEL }}
      api_base_url: ${{ steps.vars.outputs.API_BASE_URL }}
      cors_origin: ${{ steps.vars.outputs.CORS_ORIGIN }}
      webhook_url: ${{ steps.vars.outputs.WEBHOOK_URL }}
      deploy_tag: ${{ steps.vars.outputs.DEPLOY_TAG }}
      environment: ${{ steps.vars.outputs.ENVIRONMENT }}
    steps:
      # --- Checkout ---------------------------------------------------------
      - uses: actions/checkout@v4

      # --- Decide env / tags -----------------------------------------------
      - id: vars
        name: üõ†Ô∏è Calc variables
        shell: bash
        run: |
          set -e
          ENVIRONMENT="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}"
          if [[ "$ENVIRONMENT" == "production" ]]; then
            ENV_SUFFIX=""
            IMAGE_SUFFIX=""
            NODE_ENV="production"
            MAX_INSTANCES=2
            LOG_LEVEL=""
            API_BASE_URL="${{ vars.PROD_API_BASE_URL || 'https://api-onekeybalance.sd0.tech' }}"
            CORS_ORIGIN="${{ vars.PROD_CORS_ORIGIN || 'https://onekeybalance.sd0.tech' }}"
            WEBHOOK_URL="${{ vars.PROD_WEBHOOK_URL || 'https://api-onekeybalance.sd0.tech/v1/api/webhook' }}"
            SECRET_PREFIX="production"
            SERVICE_NAME="one-key-balance-kit"
            CACHE_TTL=3600
            DEPLOY_TAG=""
          else
            ENV_SUFFIX="-dev"
            IMAGE_SUFFIX="-dev"
            NODE_ENV="development"
            MAX_INSTANCES=1
            LOG_LEVEL="debug"
            API_BASE_URL="${{ vars.DEV_API_BASE_URL || 'https://staging-api-onekeybalance.sd0.tech' }}"
            CORS_ORIGIN="${{ vars.DEV_CORS_ORIGIN || '*' }}"
            WEBHOOK_URL="${{ vars.DEV_WEBHOOK_URL || 'https://staging-api-onekeybalance.sd0.tech/v1/api/webhook' }}"
            SECRET_PREFIX="staging"
            SERVICE_NAME="one-key-balance-kit-dev"
            CACHE_TTL=1800
            DEPLOY_TAG="--tag=dev"
          fi
          IMAGE_TAG="${{ github.sha }}"
          IMAGE_ENV_TAG="$ENVIRONMENT"
          if [[ "$ENVIRONMENT" == "production" ]]; then
            IMAGE_PATH="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/one-key-balance-kit/api"
          else
            IMAGE_PATH="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/one-key-balance-kit/api-dev"
          fi

          # Ë®≠ÁΩÆËº∏Âá∫ËÆäÊï∏
          echo "ENVIRONMENT=$ENVIRONMENT"           >> $GITHUB_OUTPUT
          echo "ENV_SUFFIX=$ENV_SUFFIX"             >> $GITHUB_OUTPUT
          echo "IMAGE_SUFFIX=$IMAGE_SUFFIX"         >> $GITHUB_OUTPUT
          echo "NODE_ENV=$NODE_ENV"                 >> $GITHUB_OUTPUT
          echo "LOG_LEVEL=$LOG_LEVEL"               >> $GITHUB_OUTPUT
          echo "API_BASE_URL=$API_BASE_URL"         >> $GITHUB_OUTPUT
          echo "CORS_ORIGIN=$CORS_ORIGIN"           >> $GITHUB_OUTPUT
          echo "WEBHOOK_URL=$WEBHOOK_URL"           >> $GITHUB_OUTPUT
          echo "SECRET_PREFIX=$SECRET_PREFIX"       >> $GITHUB_OUTPUT
          echo "MAX_INSTANCES=$MAX_INSTANCES"       >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=$IMAGE_TAG"               >> $GITHUB_OUTPUT
          echo "IMAGE_ENV_TAG=$IMAGE_ENV_TAG"       >> $GITHUB_OUTPUT
          echo "IMAGE_PATH=$IMAGE_PATH"             >> $GITHUB_OUTPUT
          echo "DEPLOY_TAG=$DEPLOY_TAG"             >> $GITHUB_OUTPUT

      # --- Auth -------------------------------------------------------------
      - name: üîë Auth to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: üê≥ Configure Artifact Registry
        shell: bash
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --project $PROJECT_ID

      # --- Build & push -----------------------------------------------------
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: üì¶ Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ steps.vars.outputs.IMAGE_PATH }}:${{ steps.vars.outputs.IMAGE_TAG }}
            ${{ steps.vars.outputs.IMAGE_PATH }}:${{ steps.vars.outputs.IMAGE_ENV_TAG }}
            ${{ steps.vars.outputs.IMAGE_PATH }}:latest
          build-args: |
            NODE_ENV=${{ steps.vars.outputs.NODE_ENV }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =============================================================
  # 2) Scan Image (depends on build)
  # =============================================================
  scan_image:
    name: üîç Scan Image
    runs-on: ubuntu-latest
    needs: build_push
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Ë®≠ÂÆö GCR Êò†ÂÉèË∑ØÂæë
        id: set-image
        run: |
          ENV_SUFFIX="${{ needs.build_push.outputs.env_suffix }}"
          IMAGE_TAG="${{ needs.build_push.outputs.image_tag }}"
          if [ "$ENV_SUFFIX" == "-dev" ]; then
            IMAGE_PATH="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/one-key-balance-kit/api-dev"
          else
            IMAGE_PATH="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/one-key-balance-kit/api"
          fi

          # Ëº∏Âá∫Áµ¶ÂæåÁ∫åÊ≠•È©ü‰ΩøÁî®
          echo "image_path=${IMAGE_PATH}" >> $GITHUB_OUTPUT
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: üîë Auth to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: üê≥ Configure Docker
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet
          IMAGE_PATH="${{ steps.set-image.outputs.image_path }}"
          IMAGE_TAG="${{ steps.set-image.outputs.image_tag }}"
          if [ -z "$IMAGE_PATH" ]; then
            echo "ÈåØË™§: IMAGE_PATH ÁÇ∫Á©∫"
            exit 1
          fi
          if [ -z "$IMAGE_TAG" ]; then
            echo "ÈåØË™§: IMAGE_TAG ÁÇ∫Á©∫"
            exit 1
          fi
          docker pull ${IMAGE_PATH}:${IMAGE_TAG}

      - name: Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ steps.set-image.outputs.image_path }}:${{ steps.set-image.outputs.image_tag }}'
          format: sarif
          output: trivy-results.sarif
          severity: CRITICAL,HIGH

  # =============================================================
  # 3) Generate manifest  (depends on build)
  # =============================================================
  generate_manifest:
    name: üìù Generate Manifest
    runs-on: ubuntu-latest
    needs: build_push
    permissions:
      contents: read
    outputs:
      manifest: cloud-run-service.generated.yaml
    steps:
      - uses: actions/checkout@v4

      - name: Create manifest file
        shell: bash
        run: |
          set -e
          ENV_SUFFIX='${{ needs.build_push.outputs.env_suffix }}'
          ENVIRONMENT='${{ needs.build_push.outputs.environment }}'
          MAX_INSTANCES='${{ needs.build_push.outputs.max_instances }}'
          REGION='${{ env.REGION }}'
          PROJECT_ID='${{ env.PROJECT_ID }}'
          IMAGE_SUFFIX='${{ needs.build_push.outputs.image_suffix }}'
          IMAGE_TAG='${{ needs.build_push.outputs.image_tag }}'
          NODE_ENV='${{ needs.build_push.outputs.node_env }}'
          LOG_LEVEL='${{ needs.build_push.outputs.log_level }}'
          API_BASE_URL='${{ needs.build_push.outputs.api_base_url }}'
          CORS_ORIGIN='${{ needs.build_push.outputs.cors_origin }}'
          WEBHOOK_URL='${{ needs.build_push.outputs.webhook_url }}'
          SECRET_PREFIX='${{ needs.build_push.outputs.secret_prefix }}'
          if [[ "$CORS_ORIGIN" == "*" ]]; then CORS_ORIGIN='"*"'; fi

          # Á¢∫‰øùÊò†ÂÉèË∑ØÂæëÊ≠£Á¢∫
          if [[ "$ENVIRONMENT" == "production" ]]; then
            IMAGE_PATH="${REGION}-docker.pkg.dev/${PROJECT_ID}/one-key-balance-kit/api"
          else
            IMAGE_PATH="${REGION}-docker.pkg.dev/${PROJECT_ID}/one-key-balance-kit/api-dev"
          fi

          # È°ØÁ§∫Â∞áÁî®ÊñºÈÉ®ÁΩ≤ÁöÑÊò†ÂÉè
          echo "ÈÉ®ÁΩ≤‰ΩøÁî®ÁöÑÊò†ÂÉè: ${IMAGE_PATH}:${IMAGE_TAG}"

          sed -e "s|\${ENV_SUFFIX}|$ENV_SUFFIX|g" \
              -e "s|\${ENVIRONMENT}|$ENVIRONMENT|g" \
              -e "s|\${MAX_INSTANCES}|$MAX_INSTANCES|g" \
              -e "s|\${REGION}|$REGION|g" \
              -e "s|\${PROJECT_ID}|$PROJECT_ID|g" \
              -e "s|\${IMAGE_SUFFIX}|$IMAGE_SUFFIX|g" \
              -e "s|\${IMAGE_TAG}|$IMAGE_TAG|g" \
              -e "s|\${NODE_ENV}|$NODE_ENV|g" \
              -e "s|\${LOG_LEVEL}|$LOG_LEVEL|g" \
              -e "s|\${API_BASE_URL}|$API_BASE_URL|g" \
              -e "s|\${CORS_ORIGIN}|$CORS_ORIGIN|g" \
              -e "s|\${WEBHOOK_URL}|$WEBHOOK_URL|g" \
              -e "s|\${SECRET_PREFIX}|$SECRET_PREFIX|g" \
              -e "s|\${IMAGE_PATH}|$IMAGE_PATH|g" \
              cloud-run-service.template.yaml > cloud-run-service.generated.yaml

          # Ê™¢Êü•ÁîüÊàêÁöÑ manifest
          echo "ÁîüÊàê manifest ÂÆåÊàêÔºåÊ™¢Êü•Êò†ÂÉèË∑ØÂæë:"
          grep -A 2 "containers:" cloud-run-service.generated.yaml

      # ‰∏äÂÇ≥Áî¢ÁîüÁöÑ manifest ‰ΩúÁÇ∫ artifactÔºå‰æõÂæåÁ∫åÈÉ®ÁΩ≤‰ΩøÁî®
      - name: ‰∏äÂÇ≥ manifest Ê™îÊ°à
        uses: actions/upload-artifact@v4
        with:
          name: cloud-run-manifest
          path: cloud-run-service.generated.yaml
          retention-days: 1

  # =============================================================
  # 4) Deploy (depends on manifest & scan)
  # =============================================================
  deploy:
    name: üöÄ Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs:
      - generate_manifest
      - scan_image
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      # ‰∏ãËºâ‰πãÂâç‰∏äÂÇ≥ÁöÑ manifest Ê™îÊ°à
      - name: ‰∏ãËºâ manifest Ê™îÊ°à
        uses: actions/download-artifact@v4
        with:
          name: cloud-run-manifest
          path: .

      # Á¢∫Ë™ç‰∏ãËºâÁöÑÊ™îÊ°àÂ≠òÂú®‰∏îÂèØËÆÄ
      - name: Ê™¢Êü• manifest Ê™îÊ°à
        run: |
          if [ ! -f "cloud-run-service.generated.yaml" ]; then
            echo "‚ùå ÈåØË™§: Manifest Ê™îÊ°à‰∏çÂ≠òÂú®"
            ls -la
            exit 1
          fi

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Cloud Run Deploy
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          metadata: cloud-run-service.generated.yaml
          region: ${{ env.REGION }}
          project_id: ${{ env.PROJECT_ID }}

      - name: üåê Show URL
        run: |
          echo "‚úÖ ${{ needs.build_push.outputs.environment }} URL: ${{ steps.deploy.outputs.url }}"

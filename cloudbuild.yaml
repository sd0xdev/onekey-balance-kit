# cloudbuild.yaml ── Build → Deploy
substitutions:
  _IMAGE_PATH: '${_REGION}-docker.pkg.dev/$PROJECT_ID/one-key-balance-kit/api'
  _ENV: 'staging' # GitHub Action 會覆寫
  _MAX_INSTANCES: '1'
  _REGION: 'asia-east1' # 預設值，GitHub Action 會覆寫
  _GIT_SHA: 'latest' # 預設值，GitHub Action 會覆寫
timeout: '1200s'
options:
  logging: 'CLOUD_LOGGING_ONLY'
steps:
  # --- 1) Build multi-arch image ------------------------------------------
  - id: build-image
    name: gcr.io/kaniko-project/executor:latest
    entrypoint: ''
    args:
      # context 與 Dockerfile (預設為 ./Dockerfile)
      - '--context=.'
      - '--dockerfile=Dockerfile'

      # 組合 tag ── 使用 _GIT_SHA，如空則 latest
      - '--destination=${_IMAGE_PATH}:${_GIT_SHA}'
      - '--destination=${_IMAGE_PATH}:${_ENV}'
      - '--destination=${_IMAGE_PATH}:latest'

      # 建置引數
      - '--build-arg=NODE_ENV=$(_ENV==production?"production":"staging")'

      # Kaniko layer cache（存放於同一 Registry）
      - '--cache=true'
      - '--cache-ttl=48h'

  # --- 2) 產生 manifest & 部署 -------------------------------------------
  - id: deploy
    name: gcr.io/google.com/cloudsdktool/cloud-sdk
    entrypoint: bash
    args:
      - -ceu
      - |

        # 使用條件語句決定後綴 (避免 Cloud Build 解析變數)
        if [ "${_ENV}" = "production" ]; then
          suffix=""
        else
          suffix="-dev"
        fi

        # 使用 _GIT_SHA 或 latest 作為映像標籤
        tag="$_GIT_SHA"
        if [ -z "$tag" ]; then
          tag="latest"
        fi

        # 避免使用可能被 Cloud Build 誤解的變數名稱
        export env_suffix=$([ "${_ENV}" = "production" ] && echo "" || echo "-dev")
        export environment="${_ENV}"
        export max_instances="${_MAX_INSTANCES}"
        export region="${_REGION}"
        export project_id="$PROJECT_ID"
        export img_tag="$tag"
        export node_env=$([ "${_ENV}" = "production" ] && echo "production" || echo "staging")
        export log_level=$([ "${_ENV}" = "production" ] && echo "" || echo "debug")
        export api_base_url=$([ "${_ENV}" = "production" ] && echo "https://api-onekeybalance.sd0.tech" || echo "https://staging-api-onekeybalance.sd0.tech")
        export cors_origin=$([ "${_ENV}" = "production" ] && echo "https://onekeybalance.sd0.tech" || echo '"*"')
        export webhook_url=$([ "${_ENV}" = "production" ] && echo "https://api-onekeybalance.sd0.tech/v1/api/webhook" || echo "https://staging-api-onekeybalance.sd0.tech/v1/api/webhook")
        export secret_prefix=$([ "${_ENV}" = "production" ] && echo "production" || echo "staging")

        # 構建映像路徑
        export image_path="${_IMAGE_PATH}"

        # 顯示將用於部署的映像
        echo "部署使用的映像: $image_path:$tag"

        # 使用 sed 替換環境變數，而不是 envsubst
        cp cloud-run-service.template.yaml cloud-run-service.generated.yaml
        sed -i "s|\${env_suffix}|$env_suffix|g" cloud-run-service.generated.yaml
        sed -i "s|\${environment}|$environment|g" cloud-run-service.generated.yaml
        sed -i "s|\${max_instances}|$max_instances|g" cloud-run-service.generated.yaml
        sed -i "s|\${region}|$region|g" cloud-run-service.generated.yaml
        sed -i "s|\${project_id}|$project_id|g" cloud-run-service.generated.yaml
        sed -i "s|\${image_path}|$image_path|g" cloud-run-service.generated.yaml
        sed -i "s|\${img_tag}|$img_tag|g" cloud-run-service.generated.yaml
        sed -i "s|\${node_env}|$node_env|g" cloud-run-service.generated.yaml
        sed -i "s|\${log_level}|$log_level|g" cloud-run-service.generated.yaml
        sed -i "s|\${api_base_url}|$api_base_url|g" cloud-run-service.generated.yaml
        sed -i "s|\${cors_origin}|$cors_origin|g" cloud-run-service.generated.yaml
        sed -i "s|\${webhook_url}|$webhook_url|g" cloud-run-service.generated.yaml
        sed -i "s|\${secret_prefix}|$secret_prefix|g" cloud-run-service.generated.yaml

        # 檢查是否有未替換的變數
        echo "檢查是否有未替換的變數 (應該不顯示任何內容):"
        grep -o '\${[^}]*}' cloud-run-service.generated.yaml || echo "全部變數已成功替換!"

        # 檢查生成的 manifest
        echo "生成 manifest 完成，檢查映像路徑:"
        grep -A 2 "containers:" cloud-run-service.generated.yaml

        # 部署至 Cloud Run
        gcloud run services replace cloud-run-service.generated.yaml \
          --region=${_REGION} --project=$PROJECT_ID

# 注意: 此處不使用獨立的 images 區段
# 我們已經在 build-image 步驟中使用 docker buildx 構建並推送了映像
# 這樣可以避免 Cloud Build 解析變數時出錯
